{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\rendering\\cellRenderers\\animateSlideCellRenderer.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\rendering\\cellRenderers\\animateSlideCellRenderer.js","mtime":1525243699809},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../../utils\");\r\nvar component_1 = require(\"../../widgets/component\");\r\nvar AnimateSlideCellRenderer = /*@__PURE__*/ (function (_super) {\r\n    __extends(AnimateSlideCellRenderer, _super);\r\n    function AnimateSlideCellRenderer() {\r\n        var _this = _super.call(this, AnimateSlideCellRenderer.TEMPLATE) || this;\r\n        _this.refreshCount = 0;\r\n        _this.eCurrent = _this.queryForHtmlElement('.ag-value-slide-current');\r\n        return _this;\r\n    }\r\n    AnimateSlideCellRenderer.prototype.init = function (params) {\r\n        this.params = params;\r\n        this.refresh(params);\r\n    };\r\n    AnimateSlideCellRenderer.prototype.addSlideAnimation = function () {\r\n        var _this = this;\r\n        this.refreshCount++;\r\n        // below we keep checking this, and stop working on the animation\r\n        // if it no longer matches - this means another animation has started\r\n        // and this one is stale.\r\n        var refreshCountCopy = this.refreshCount;\r\n        // if old animation, remove it\r\n        if (this.ePrevious) {\r\n            this.getGui().removeChild(this.ePrevious);\r\n        }\r\n        this.ePrevious = utils_1.Utils.loadTemplate('<span class=\"ag-value-slide-previous ag-value-slide-out\"></span>');\r\n        this.ePrevious.innerHTML = this.eCurrent.innerHTML;\r\n        this.getGui().insertBefore(this.ePrevious, this.eCurrent);\r\n        // having timeout of 0 allows use to skip to the next css turn,\r\n        // so we know the previous css classes have been applied. so the\r\n        // complex set of setTimeout below creates the animation\r\n        setTimeout(function () {\r\n            if (refreshCountCopy !== _this.refreshCount) {\r\n                return;\r\n            }\r\n            utils_1.Utils.addCssClass(_this.ePrevious, 'ag-value-slide-out-end');\r\n        }, 50);\r\n        setTimeout(function () {\r\n            if (refreshCountCopy !== _this.refreshCount) {\r\n                return;\r\n            }\r\n            _this.getGui().removeChild(_this.ePrevious);\r\n            _this.ePrevious = null;\r\n        }, 3000);\r\n    };\r\n    AnimateSlideCellRenderer.prototype.refresh = function (params) {\r\n        var value = params.value;\r\n        if (utils_1.Utils.missing(value)) {\r\n            value = '';\r\n        }\r\n        if (value === this.lastValue) {\r\n            return;\r\n        }\r\n        this.addSlideAnimation();\r\n        this.lastValue = value;\r\n        if (utils_1.Utils.exists(params.valueFormatted)) {\r\n            this.eCurrent.innerHTML = params.valueFormatted;\r\n        }\r\n        else if (utils_1.Utils.exists(params.value)) {\r\n            this.eCurrent.innerHTML = value;\r\n        }\r\n        else {\r\n            this.eCurrent.innerHTML = '';\r\n        }\r\n        return true;\r\n    };\r\n    AnimateSlideCellRenderer.TEMPLATE = '<span>' +\r\n        '<span class=\"ag-value-slide-current\"></span>' +\r\n        '</span>';\r\n    return AnimateSlideCellRenderer;\r\n}(component_1.Component));\r\nexports.AnimateSlideCellRenderer = AnimateSlideCellRenderer;\r\n",null]}