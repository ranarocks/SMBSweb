{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\grid.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\grid.js","mtime":1525243698425},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar gridOptionsWrapper_1 = require(\"./gridOptionsWrapper\");\r\nvar selectionController_1 = require(\"./selectionController\");\r\nvar columnApi_1 = require(\"./columnController/columnApi\");\r\nvar columnController_1 = require(\"./columnController/columnController\");\r\nvar rowRenderer_1 = require(\"./rendering/rowRenderer\");\r\nvar headerRenderer_1 = require(\"./headerRendering/headerRenderer\");\r\nvar filterManager_1 = require(\"./filter/filterManager\");\r\nvar valueService_1 = require(\"./valueService/valueService\");\r\nvar eventService_1 = require(\"./eventService\");\r\nvar gridPanel_1 = require(\"./gridPanel/gridPanel\");\r\nvar gridApi_1 = require(\"./gridApi\");\r\nvar balancedColumnTreeBuilder_1 = require(\"./columnController/balancedColumnTreeBuilder\");\r\nvar displayedGroupCreator_1 = require(\"./columnController/displayedGroupCreator\");\r\nvar expressionService_1 = require(\"./valueService/expressionService\");\r\nvar templateService_1 = require(\"./templateService\");\r\nvar popupService_1 = require(\"./widgets/popupService\");\r\nvar logger_1 = require(\"./logger\");\r\nvar columnUtils_1 = require(\"./columnController/columnUtils\");\r\nvar autoWidthCalculator_1 = require(\"./rendering/autoWidthCalculator\");\r\nvar horizontalResizeService_1 = require(\"./headerRendering/horizontalResizeService\");\r\nvar context_1 = require(\"./context/context\");\r\nvar csvCreator_1 = require(\"./csvCreator\");\r\nvar gridCore_1 = require(\"./gridCore\");\r\nvar standardMenu_1 = require(\"./headerRendering/standardMenu\");\r\nvar dragAndDropService_1 = require(\"./dragAndDrop/dragAndDropService\");\r\nvar dragService_1 = require(\"./dragAndDrop/dragService\");\r\nvar sortController_1 = require(\"./sortController\");\r\nvar focusedCellController_1 = require(\"./focusedCellController\");\r\nvar mouseEventService_1 = require(\"./gridPanel/mouseEventService\");\r\nvar cellNavigationService_1 = require(\"./cellNavigationService\");\r\nvar utils_1 = require(\"./utils\");\r\nvar filterStage_1 = require(\"./rowModels/inMemory/filterStage\");\r\nvar sortStage_1 = require(\"./rowModels/inMemory/sortStage\");\r\nvar flattenStage_1 = require(\"./rowModels/inMemory/flattenStage\");\r\nvar cellEditorFactory_1 = require(\"./rendering/cellEditorFactory\");\r\nvar events_1 = require(\"./events\");\r\nvar infiniteRowModel_1 = require(\"./rowModels/infinite/infiniteRowModel\");\r\nvar inMemoryRowModel_1 = require(\"./rowModels/inMemory/inMemoryRowModel\");\r\nvar cellRendererFactory_1 = require(\"./rendering/cellRendererFactory\");\r\nvar cellRendererService_1 = require(\"./rendering/cellRendererService\");\r\nvar valueFormatterService_1 = require(\"./rendering/valueFormatterService\");\r\nvar agCheckbox_1 = require(\"./widgets/agCheckbox\");\r\nvar baseFrameworkFactory_1 = require(\"./baseFrameworkFactory\");\r\nvar scrollVisibleService_1 = require(\"./gridPanel/scrollVisibleService\");\r\nvar downloader_1 = require(\"./downloader\");\r\nvar xmlFactory_1 = require(\"./xmlFactory\");\r\nvar gridSerializer_1 = require(\"./gridSerializer\");\r\nvar stylingService_1 = require(\"./styling/stylingService\");\r\nvar columnHoverService_1 = require(\"./rendering/columnHoverService\");\r\nvar columnAnimationService_1 = require(\"./rendering/columnAnimationService\");\r\nvar sortService_1 = require(\"./rowNodes/sortService\");\r\nvar filterService_1 = require(\"./rowNodes/filterService\");\r\nvar rowNodeFactory_1 = require(\"./rowNodes/rowNodeFactory\");\r\nvar autoGroupColService_1 = require(\"./columnController/autoGroupColService\");\r\nvar paginationProxy_1 = require(\"./rowModels/paginationProxy\");\r\nvar immutableService_1 = require(\"./rowModels/inMemory/immutableService\");\r\nvar constants_1 = require(\"./constants\");\r\nvar valueCache_1 = require(\"./valueService/valueCache\");\r\nvar changeDetectionService_1 = require(\"./valueService/changeDetectionService\");\r\nvar alignedGridsService_1 = require(\"./alignedGridsService\");\r\nvar pinnedRowModel_1 = require(\"./rowModels/pinnedRowModel\");\r\nvar componentResolver_1 = require(\"./components/framework/componentResolver\");\r\nvar componentRecipes_1 = require(\"./components/framework/componentRecipes\");\r\nvar componentProvider_1 = require(\"./components/framework/componentProvider\");\r\nvar agComponentUtils_1 = require(\"./components/framework/agComponentUtils\");\r\nvar componentMetadataProvider_1 = require(\"./components/framework/componentMetadataProvider\");\r\nvar beans_1 = require(\"./rendering/beans\");\r\nvar environment_1 = require(\"./environment\");\r\nvar animationFrameService_1 = require(\"./misc/animationFrameService\");\r\nvar navigationService_1 = require(\"./gridPanel/navigationService\");\r\nvar heightScaler_1 = require(\"./rendering/heightScaler\");\r\nvar selectableService_1 = require(\"./rowNodes/selectableService\");\r\nvar testingSandbox_1 = require(\"./widgets/testingSandbox\");\r\nvar autoHeightCalculator_1 = require(\"./rendering/autoHeightCalculator\");\r\nvar Grid = /*@__PURE__*/ (function () {\r\n    function Grid(eGridDiv, gridOptions, params) {\r\n        if (!eGridDiv) {\r\n            console.error('ag-Grid: no div element provided to the grid');\r\n        }\r\n        if (!gridOptions) {\r\n            console.error('ag-Grid: no gridOptions provided to the grid');\r\n        }\r\n        var rowModelClass = this.getRowModelClass(gridOptions);\r\n        var enterprise = utils_1.Utils.exists(Grid.enterpriseBeans);\r\n        var frameworkFactory = params ? params.frameworkFactory : null;\r\n        if (utils_1.Utils.missing(frameworkFactory)) {\r\n            frameworkFactory = new baseFrameworkFactory_1.BaseFrameworkFactory();\r\n        }\r\n        var overrideBeans = [];\r\n        if (Grid.enterpriseBeans) {\r\n            overrideBeans = overrideBeans.concat(Grid.enterpriseBeans);\r\n        }\r\n        if (Grid.frameworkBeans) {\r\n            overrideBeans = overrideBeans.concat(Grid.frameworkBeans);\r\n        }\r\n        var seed = {\r\n            enterprise: enterprise,\r\n            gridOptions: gridOptions,\r\n            eGridDiv: eGridDiv,\r\n            $scope: params ? params.$scope : null,\r\n            $compile: params ? params.$compile : null,\r\n            quickFilterOnScope: params ? params.quickFilterOnScope : null,\r\n            globalEventListener: params ? params.globalEventListener : null,\r\n            frameworkFactory: frameworkFactory\r\n        };\r\n        if (params && params.seedBeanInstances) {\r\n            utils_1.Utils.assign(seed, params.seedBeanInstances);\r\n        }\r\n        var components = [\r\n            { componentName: 'AgCheckbox', theClass: agCheckbox_1.AgCheckbox }\r\n            // niall put the below in for testing some PoC code, niall will\r\n            // remove this comment and code when PoC is over\r\n            ,\r\n            { componentName: 'AgSmallComponent', theClass: testingSandbox_1.SmallComponent }\r\n        ];\r\n        if (Grid.enterpriseComponents) {\r\n            components = components.concat(Grid.enterpriseComponents);\r\n        }\r\n        var contextParams = {\r\n            overrideBeans: overrideBeans,\r\n            seed: seed,\r\n            //Careful with the order of the beans here, there are dependencies between them that need to be kept\r\n            beans: [rowModelClass, paginationProxy_1.PaginationAutoPageSizeService, gridApi_1.GridApi, componentProvider_1.ComponentProvider, agComponentUtils_1.AgComponentUtils, componentMetadataProvider_1.ComponentMetadataProvider,\r\n                componentProvider_1.ComponentProvider, componentResolver_1.ComponentResolver, componentRecipes_1.ComponentRecipes, heightScaler_1.HeightScaler, autoHeightCalculator_1.AutoHeightCalculator,\r\n                cellRendererFactory_1.CellRendererFactory, horizontalResizeService_1.HorizontalResizeService, pinnedRowModel_1.PinnedRowModel, dragService_1.DragService,\r\n                displayedGroupCreator_1.DisplayedGroupCreator, eventService_1.EventService, gridOptionsWrapper_1.GridOptionsWrapper, selectionController_1.SelectionController,\r\n                filterManager_1.FilterManager, columnController_1.ColumnController, paginationProxy_1.PaginationProxy, rowRenderer_1.RowRenderer, headerRenderer_1.HeaderRenderer, expressionService_1.ExpressionService,\r\n                balancedColumnTreeBuilder_1.BalancedColumnTreeBuilder, csvCreator_1.CsvCreator, downloader_1.Downloader, xmlFactory_1.XmlFactory, gridSerializer_1.GridSerializer, templateService_1.TemplateService,\r\n                navigationService_1.NavigationService, gridPanel_1.GridPanel, popupService_1.PopupService, valueCache_1.ValueCache, valueService_1.ValueService, alignedGridsService_1.AlignedGridsService,\r\n                logger_1.LoggerFactory, columnUtils_1.ColumnUtils, autoWidthCalculator_1.AutoWidthCalculator, popupService_1.PopupService, gridCore_1.GridCore, standardMenu_1.StandardMenuFactory,\r\n                dragAndDropService_1.DragAndDropService, columnApi_1.ColumnApi, focusedCellController_1.FocusedCellController, mouseEventService_1.MouseEventService,\r\n                cellNavigationService_1.CellNavigationService, filterStage_1.FilterStage, sortStage_1.SortStage, flattenStage_1.FlattenStage, filterService_1.FilterService, rowNodeFactory_1.RowNodeFactory,\r\n                cellEditorFactory_1.CellEditorFactory, cellRendererService_1.CellRendererService, valueFormatterService_1.ValueFormatterService, stylingService_1.StylingService, scrollVisibleService_1.ScrollVisibleService,\r\n                columnHoverService_1.ColumnHoverService, columnAnimationService_1.ColumnAnimationService, sortService_1.SortService, selectableService_1.SelectableService, autoGroupColService_1.AutoGroupColService, immutableService_1.ImmutableService,\r\n                changeDetectionService_1.ChangeDetectionService, environment_1.Environment, beans_1.Beans, animationFrameService_1.AnimationFrameService, sortController_1.SortController],\r\n            components: components,\r\n            debug: !!gridOptions.debug\r\n        };\r\n        var isLoggingFunc = function () { return contextParams.debug; };\r\n        this.context = new context_1.Context(contextParams, new logger_1.Logger('Context', isLoggingFunc));\r\n        this.setColumnsAndData();\r\n        this.dispatchGridReadyEvent(gridOptions);\r\n        if (gridOptions.debug) {\r\n            console.log('ag-Grid -> initialised successfully, enterprise = ' + enterprise);\r\n        }\r\n    }\r\n    Grid.setEnterpriseBeans = function (enterpriseBeans, rowModelClasses) {\r\n        this.enterpriseBeans = enterpriseBeans;\r\n        // the enterprise can inject additional row models. this is how it injects the viewportRowModel\r\n        utils_1.Utils.iterateObject(rowModelClasses, function (key, value) { return Grid.RowModelClasses[key] = value; });\r\n    };\r\n    Grid.setEnterpriseComponents = function (components) {\r\n        this.enterpriseComponents = components;\r\n    };\r\n    Grid.setFrameworkBeans = function (frameworkBeans) {\r\n        this.frameworkBeans = frameworkBeans;\r\n    };\r\n    Grid.prototype.setColumnsAndData = function () {\r\n        var gridOptionsWrapper = this.context.getBean('gridOptionsWrapper');\r\n        var columnController = this.context.getBean('columnController');\r\n        var rowModel = this.context.getBean('rowModel');\r\n        var columnDefs = gridOptionsWrapper.getColumnDefs();\r\n        var rowData = gridOptionsWrapper.getRowData();\r\n        var nothingToSet = utils_1.Utils.missing(columnDefs) && utils_1.Utils.missing(rowData);\r\n        if (nothingToSet) {\r\n            return;\r\n        }\r\n        if (utils_1.Utils.exists(columnDefs)) {\r\n            columnController.setColumnDefs(columnDefs, \"gridInitializing\");\r\n        }\r\n        if (utils_1.Utils.exists(rowData) && rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {\r\n            var inMemoryRowModel = rowModel;\r\n            inMemoryRowModel.setRowData(rowData);\r\n        }\r\n    };\r\n    Grid.prototype.dispatchGridReadyEvent = function (gridOptions) {\r\n        var eventService = this.context.getBean('eventService');\r\n        var readyEvent = {\r\n            type: events_1.Events.EVENT_GRID_READY,\r\n            api: gridOptions.api,\r\n            columnApi: gridOptions.columnApi\r\n        };\r\n        eventService.dispatchEvent(readyEvent);\r\n    };\r\n    Grid.prototype.getRowModelClass = function (gridOptions) {\r\n        var rowModelType = gridOptions.rowModelType;\r\n        if (utils_1.Utils.exists(rowModelType)) {\r\n            var rowModelClass = Grid.RowModelClasses[rowModelType];\r\n            if (utils_1.Utils.exists(rowModelClass)) {\r\n                return rowModelClass;\r\n            }\r\n            else {\r\n                if (rowModelType === 'normal') {\r\n                    console.warn(\"ag-Grid: normal rowModel deprecated. Should now be called inMemory rowModel instead.\");\r\n                    return inMemoryRowModel_1.InMemoryRowModel;\r\n                }\r\n                console.error('ag-Grid: could not find matching row model for rowModelType ' + rowModelType);\r\n                if (rowModelType === 'viewport') {\r\n                    console.error('ag-Grid: rowModelType viewport is only available in ag-Grid Enterprise');\r\n                }\r\n                if (rowModelType === 'enterprise') {\r\n                    console.error('ag-Grid: rowModelType viewport is only available in ag-Grid Enterprise');\r\n                }\r\n            }\r\n        }\r\n        return inMemoryRowModel_1.InMemoryRowModel;\r\n    };\r\n    ;\r\n    Grid.prototype.destroy = function () {\r\n        this.context.destroy();\r\n    };\r\n    // the default is InMemoryRowModel, which is also used for pagination.\r\n    // the enterprise adds viewport to this list.\r\n    Grid.RowModelClasses = {\r\n        infinite: infiniteRowModel_1.InfiniteRowModel,\r\n        inMemory: inMemoryRowModel_1.InMemoryRowModel\r\n    };\r\n    return Grid;\r\n}());\r\nexports.Grid = Grid;\r\n",null]}