{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\context\\context.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\context\\context.js","mtime":1525243698433},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\nvar Context = /*@__PURE__*/ (function () {\r\n    function Context(params, logger) {\r\n        this.beans = {};\r\n        this.componentsMappedByName = {};\r\n        this.destroyed = false;\r\n        if (!params || !params.beans) {\r\n            return;\r\n        }\r\n        this.contextParams = params;\r\n        this.logger = logger;\r\n        this.logger.log(\">> creating ag-Application Context\");\r\n        this.setupComponents();\r\n        this.createBeans();\r\n        var beans = utils_1.Utils.mapObject(this.beans, function (beanEntry) { return beanEntry.beanInstance; });\r\n        this.wireBeans(beans);\r\n        this.logger.log(\">> ag-Application Context ready - component is alive\");\r\n    }\r\n    Context.prototype.setupComponents = function () {\r\n        var _this = this;\r\n        if (this.contextParams.components) {\r\n            this.contextParams.components.forEach(function (componentMeta) { return _this.addComponent(componentMeta); });\r\n        }\r\n    };\r\n    Context.prototype.addComponent = function (componentMeta) {\r\n        // get name of the class as a string\r\n        // let className = _.getNameOfClass(ComponentClass);\r\n        // insert a dash after every capital letter\r\n        // let classEscaped = className.replace(/([A-Z])/g, \"-$1\").toLowerCase();\r\n        var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\r\n        // put all to upper case\r\n        var classUpperCase = classEscaped.toUpperCase();\r\n        // finally store\r\n        this.componentsMappedByName[classUpperCase] = componentMeta.theClass;\r\n    };\r\n    Context.prototype.createComponent = function (element, afterPreCreateCallback) {\r\n        var key = element.nodeName;\r\n        if (this.componentsMappedByName && this.componentsMappedByName[key]) {\r\n            var newComponent = new this.componentsMappedByName[key]();\r\n            this.wireBean(newComponent, afterPreCreateCallback);\r\n            return newComponent;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    Context.prototype.wireBean = function (bean, afterPreCreateCallback) {\r\n        if (!bean) {\r\n            throw Error(\"Can't wire to bean since it is null\");\r\n        }\r\n        this.wireBeans([bean], afterPreCreateCallback);\r\n    };\r\n    Context.prototype.wireBeans = function (beans, afterPreCreateCallback) {\r\n        this.autoWireBeans(beans);\r\n        this.methodWireBeans(beans);\r\n        this.preConstruct(beans);\r\n        // the callback sets the attributes, so the component has access to attributes\r\n        // before postConstruct methods in the component are executed\r\n        if (utils_1.Utils.exists(afterPreCreateCallback)) {\r\n            beans.forEach(afterPreCreateCallback);\r\n        }\r\n        this.postConstruct(beans);\r\n    };\r\n    Context.prototype.createBeans = function () {\r\n        var _this = this;\r\n        // register all normal beans\r\n        this.contextParams.beans.forEach(this.createBeanEntry.bind(this));\r\n        // register override beans, these will overwrite beans above of same name\r\n        if (this.contextParams.overrideBeans) {\r\n            this.contextParams.overrideBeans.forEach(this.createBeanEntry.bind(this));\r\n        }\r\n        // instantiate all beans - overridden beans will be left out\r\n        utils_1.Utils.iterateObject(this.beans, function (key, beanEntry) {\r\n            var constructorParamsMeta;\r\n            if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {\r\n                constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;\r\n            }\r\n            var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);\r\n            var newInstance = applyToConstructor(beanEntry.bean, constructorParams);\r\n            beanEntry.beanInstance = newInstance;\r\n            _this.logger.log(\"bean \" + _this.getBeanName(newInstance) + \" created\");\r\n        });\r\n    };\r\n    Context.prototype.createBeanEntry = function (Bean) {\r\n        var metaData = Bean.__agBeanMetaData;\r\n        if (!metaData) {\r\n            var beanName = void 0;\r\n            if (Bean.prototype.constructor) {\r\n                beanName = Bean.prototype.constructor.name;\r\n            }\r\n            else {\r\n                beanName = \"\" + Bean;\r\n            }\r\n            console.error(\"context item \" + beanName + \" is not a bean\");\r\n            return;\r\n        }\r\n        var beanEntry = {\r\n            bean: Bean,\r\n            beanInstance: null,\r\n            beanName: metaData.beanName\r\n        };\r\n        this.beans[metaData.beanName] = beanEntry;\r\n    };\r\n    Context.prototype.autoWireBeans = function (beans) {\r\n        var _this = this;\r\n        beans.forEach(function (bean) { return _this.autoWireBean(bean); });\r\n    };\r\n    Context.prototype.methodWireBeans = function (beans) {\r\n        var _this = this;\r\n        beans.forEach(function (bean) {\r\n            if (!bean) {\r\n                throw Error(\"Can't wire to bean since it is null\");\r\n            }\r\n            return _this.methodWireBean(bean);\r\n        });\r\n    };\r\n    Context.prototype.autoWireBean = function (bean) {\r\n        var _this = this;\r\n        var currentBean = bean;\r\n        var _loop_1 = function () {\r\n            var currentConstructor = currentBean.constructor;\r\n            if (currentConstructor.__agBeanMetaData && currentConstructor.__agBeanMetaData.agClassAttributes) {\r\n                var attributes = currentConstructor.__agBeanMetaData.agClassAttributes;\r\n                if (!attributes) {\r\n                    return { value: void 0 };\r\n                }\r\n                var beanName_1 = this_1.getBeanName(currentConstructor);\r\n                attributes.forEach(function (attribute) {\r\n                    var otherBean = _this.lookupBeanInstance(beanName_1, attribute.beanName, attribute.optional);\r\n                    bean[attribute.attributeName] = otherBean;\r\n                });\r\n            }\r\n            currentBean = Object.getPrototypeOf(currentBean) ? Object.getPrototypeOf(currentBean) : null;\r\n        };\r\n        var this_1 = this;\r\n        while (currentBean != null) {\r\n            var state_1 = _loop_1();\r\n            if (typeof state_1 === \"object\")\r\n                return state_1.value;\r\n        }\r\n    };\r\n    Context.prototype.getBeanName = function (constructor) {\r\n        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {\r\n            return constructor.__agBeanMetaData.beanName;\r\n        }\r\n        var constructorString = constructor.toString();\r\n        var beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\r\n        return beanName;\r\n    };\r\n    Context.prototype.methodWireBean = function (bean) {\r\n        var _this = this;\r\n        var autowiredMethods;\r\n        if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.autowireMethods) {\r\n            autowiredMethods = bean.constructor.__agBeanMetaData.autowireMethods;\r\n        }\r\n        utils_1.Utils.iterateObject(autowiredMethods, function (methodName, wireParams) {\r\n            // skip constructor, as this is dealt with elsewhere\r\n            if (methodName === \"agConstructor\") {\r\n                return;\r\n            }\r\n            var beanName = _this.getBeanName(bean.constructor);\r\n            var initParams = _this.getBeansForParameters(wireParams, beanName);\r\n            bean[methodName].apply(bean, initParams);\r\n        });\r\n    };\r\n    Context.prototype.getBeansForParameters = function (parameters, beanName) {\r\n        var _this = this;\r\n        var beansList = [];\r\n        if (parameters) {\r\n            utils_1.Utils.iterateObject(parameters, function (paramIndex, otherBeanName) {\r\n                var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);\r\n                beansList[Number(paramIndex)] = otherBean;\r\n            });\r\n        }\r\n        return beansList;\r\n    };\r\n    Context.prototype.lookupBeanInstance = function (wiringBean, beanName, optional) {\r\n        if (optional === void 0) {\r\n            optional = false;\r\n        }\r\n        if (beanName === \"context\") {\r\n            return this;\r\n        }\r\n        else if (this.contextParams.seed && this.contextParams.seed.hasOwnProperty(beanName)) {\r\n            return this.contextParams.seed[beanName];\r\n        }\r\n        else {\r\n            var beanEntry = this.beans[beanName];\r\n            if (beanEntry) {\r\n                return beanEntry.beanInstance;\r\n            }\r\n            if (!optional) {\r\n                console.error(\"ag-Grid: unable to find bean reference \" + beanName + \" while initialising \" + wiringBean);\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n    Context.prototype.postConstruct = function (beans) {\r\n        beans.forEach(function (bean) {\r\n            // try calling init methods\r\n            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.postConstructMethods) {\r\n                bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.postConstructMethods.forEach(function (methodName) { return bean[methodName](); });\r\n            }\r\n        });\r\n    };\r\n    Context.prototype.preConstruct = function (beans) {\r\n        beans.forEach(function (bean) {\r\n            // try calling init methods\r\n            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.preConstructMethods) {\r\n                bean.constructor.__agBeanMetaData.preConstructMethods.forEach(function (methodName) { return bean[methodName](); });\r\n            }\r\n        });\r\n    };\r\n    Context.prototype.getBean = function (name) {\r\n        return this.lookupBeanInstance(\"getBean\", name, true);\r\n    };\r\n    Context.prototype.destroy = function () {\r\n        // should only be able to destroy once\r\n        if (this.destroyed) {\r\n            return;\r\n        }\r\n        this.logger.log(\">> Shutting down ag-Application Context\");\r\n        // try calling destroy methods\r\n        utils_1.Utils.iterateObject(this.beans, function (key, beanEntry) {\r\n            var bean = beanEntry.beanInstance;\r\n            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.preDestroyMethods) {\r\n                bean.constructor.__agBeanMetaData.preDestroyMethods.forEach(function (methodName) { return bean[methodName](); });\r\n            }\r\n        });\r\n        this.destroyed = true;\r\n        this.logger.log(\">> ag-Application Context shut down - component is dead\");\r\n    };\r\n    return Context;\r\n}());\r\nexports.Context = Context;\r\n// taken from: http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply\r\n// allows calling 'apply' on a constructor\r\nfunction applyToConstructor(constructor, argArray) {\r\n    var args = [null].concat(argArray);\r\n    var factoryFunction = constructor.bind.apply(constructor, args);\r\n    return new factoryFunction();\r\n}\r\nfunction PreConstruct(target, methodName, descriptor) {\r\n    var props = getOrCreateProps(target.constructor);\r\n    if (!props.postConstructMethods) {\r\n        props.preConstructMethods = [];\r\n    }\r\n    props.preConstructMethods.push(methodName);\r\n}\r\nexports.PreConstruct = PreConstruct;\r\nfunction PostConstruct(target, methodName, descriptor) {\r\n    var props = getOrCreateProps(target.constructor);\r\n    if (!props.postConstructMethods) {\r\n        props.postConstructMethods = [];\r\n    }\r\n    props.postConstructMethods.push(methodName);\r\n}\r\nexports.PostConstruct = PostConstruct;\r\nfunction PreDestroy(target, methodName, descriptor) {\r\n    var props = getOrCreateProps(target.constructor);\r\n    if (!props.preDestroyMethods) {\r\n        props.preDestroyMethods = [];\r\n    }\r\n    props.preDestroyMethods.push(methodName);\r\n}\r\nexports.PreDestroy = PreDestroy;\r\nfunction Bean(beanName) {\r\n    return function (classConstructor) {\r\n        var props = getOrCreateProps(classConstructor);\r\n        props.beanName = beanName;\r\n    };\r\n}\r\nexports.Bean = Bean;\r\nfunction Autowired(name) {\r\n    return function (target, propertyKey, descriptor) {\r\n        autowiredFunc(target, name, false, target, propertyKey, null);\r\n    };\r\n}\r\nexports.Autowired = Autowired;\r\nfunction Optional(name) {\r\n    return function (target, propertyKey, descriptor) {\r\n        autowiredFunc(target, name, true, target, propertyKey, null);\r\n    };\r\n}\r\nexports.Optional = Optional;\r\nfunction autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {\r\n    if (name === null) {\r\n        console.error(\"ag-Grid: Autowired name should not be null\");\r\n        return;\r\n    }\r\n    if (typeof index === \"number\") {\r\n        console.error(\"ag-Grid: Autowired should be on an attribute\");\r\n        return;\r\n    }\r\n    // it's an attribute on the class\r\n    var props = getOrCreateProps(target.constructor);\r\n    if (!props.agClassAttributes) {\r\n        props.agClassAttributes = [];\r\n    }\r\n    props.agClassAttributes.push({\r\n        attributeName: methodOrAttributeName,\r\n        beanName: name,\r\n        optional: optional\r\n    });\r\n}\r\nfunction Qualifier(name) {\r\n    return function (classPrototype, methodOrAttributeName, index) {\r\n        var constructor = typeof classPrototype == \"function\" ? classPrototype : classPrototype.constructor;\r\n        var props;\r\n        if (typeof index === \"number\") {\r\n            // it's a parameter on a method\r\n            var methodName = void 0;\r\n            if (methodOrAttributeName) {\r\n                props = getOrCreateProps(constructor);\r\n                methodName = methodOrAttributeName;\r\n            }\r\n            else {\r\n                props = getOrCreateProps(constructor);\r\n                methodName = \"agConstructor\";\r\n            }\r\n            if (!props.autowireMethods) {\r\n                props.autowireMethods = {};\r\n            }\r\n            if (!props.autowireMethods[methodName]) {\r\n                props.autowireMethods[methodName] = {};\r\n            }\r\n            props.autowireMethods[methodName][index] = name;\r\n        }\r\n    };\r\n}\r\nexports.Qualifier = Qualifier;\r\nfunction getOrCreateProps(target) {\r\n    if (!target.hasOwnProperty(\"__agBeanMetaData\")) {\r\n        target.__agBeanMetaData = {};\r\n    }\r\n    return target.__agBeanMetaData;\r\n}\r\n",null]}