{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\entities\\gridCell.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\entities\\gridCell.js","mtime":1525243698615},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\nvar gridRow_1 = require(\"./gridRow\");\r\nvar GridCell = /*@__PURE__*/ (function () {\r\n    function GridCell(gridCellDef) {\r\n        this.rowIndex = gridCellDef.rowIndex;\r\n        this.column = gridCellDef.column;\r\n        this.floating = utils_1.Utils.makeNull(gridCellDef.floating);\r\n    }\r\n    GridCell.prototype.getGridCellDef = function () {\r\n        return {\r\n            rowIndex: this.rowIndex,\r\n            column: this.column,\r\n            floating: this.floating\r\n        };\r\n    };\r\n    GridCell.prototype.getGridRow = function () {\r\n        return new gridRow_1.GridRow(this.rowIndex, this.floating);\r\n    };\r\n    GridCell.prototype.toString = function () {\r\n        return \"rowIndex = \" + this.rowIndex + \", floating = \" + this.floating + \", column = \" + (this.column ? this.column.getId() : null);\r\n    };\r\n    GridCell.prototype.createId = function () {\r\n        return this.rowIndex + \".\" + this.floating + \".\" + this.column.getId();\r\n    };\r\n    GridCell.prototype.equals = function (other) {\r\n        var colsMatch = this.column === other.column;\r\n        var floatingMatch = this.floating === other.floating;\r\n        var indexMatch = this.rowIndex === other.rowIndex;\r\n        return colsMatch && floatingMatch && indexMatch;\r\n    };\r\n    return GridCell;\r\n}());\r\nexports.GridCell = GridCell;\r\n",null]}