{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\rendering\\cellEditors\\largeTextCellEditor.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\rendering\\cellEditors\\largeTextCellEditor.js","mtime":1525243699933},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar component_1 = require(\"../../widgets/component\");\r\nvar constants_1 = require(\"../../constants\");\r\nvar utils_1 = require(\"../../utils\");\r\nvar LargeTextCellEditor = /*@__PURE__*/ (function (_super) {\r\n    __extends(LargeTextCellEditor, _super);\r\n    function LargeTextCellEditor() {\r\n        return _super.call(this, LargeTextCellEditor.TEMPLATE) || this;\r\n    }\r\n    LargeTextCellEditor.prototype.init = function (params) {\r\n        this.params = params;\r\n        this.focusAfterAttached = params.cellStartedEdit;\r\n        this.textarea = document.createElement(\"textarea\");\r\n        this.textarea.maxLength = params.maxLength ? params.maxLength : \"200\";\r\n        this.textarea.cols = params.cols ? params.cols : \"60\";\r\n        this.textarea.rows = params.rows ? params.rows : \"10\";\r\n        if (utils_1.Utils.exists(params.value)) {\r\n            this.textarea.value = params.value.toString();\r\n        }\r\n        this.getGui().querySelector('.ag-large-textarea').appendChild(this.textarea);\r\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\r\n    };\r\n    LargeTextCellEditor.prototype.onKeyDown = function (event) {\r\n        var key = event.which || event.keyCode;\r\n        if (key == constants_1.Constants.KEY_LEFT ||\r\n            key == constants_1.Constants.KEY_UP ||\r\n            key == constants_1.Constants.KEY_RIGHT ||\r\n            key == constants_1.Constants.KEY_DOWN ||\r\n            (event.shiftKey && key == constants_1.Constants.KEY_ENTER)) {\r\n            event.stopPropagation();\r\n        }\r\n    };\r\n    LargeTextCellEditor.prototype.afterGuiAttached = function () {\r\n        if (this.focusAfterAttached) {\r\n            this.textarea.focus();\r\n        }\r\n    };\r\n    LargeTextCellEditor.prototype.getValue = function () {\r\n        return this.textarea.value;\r\n    };\r\n    LargeTextCellEditor.prototype.isPopup = function () {\r\n        return true;\r\n    };\r\n    LargeTextCellEditor.TEMPLATE =\r\n        // tab index is needed so we can focus, which is needed for keyboard events\r\n        '<div class=\"ag-large-text\" tabindex=\"0\">' +\r\n            '<div class=\"ag-large-textarea\"></div>' +\r\n            '</div>';\r\n    return LargeTextCellEditor;\r\n}(component_1.Component));\r\nexports.LargeTextCellEditor = LargeTextCellEditor;\r\n",null]}