{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\entities\\gridRow.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\entities\\gridRow.js","mtime":1525243698597},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar constants_1 = require(\"../constants\");\r\nvar utils_1 = require(\"../utils\");\r\nvar gridCell_1 = require(\"./gridCell\");\r\nvar GridRow = /*@__PURE__*/ (function () {\r\n    function GridRow(rowIndex, floating) {\r\n        this.rowIndex = rowIndex;\r\n        this.floating = utils_1.Utils.makeNull(floating);\r\n    }\r\n    GridRow.prototype.isFloatingTop = function () {\r\n        return this.floating === constants_1.Constants.PINNED_TOP;\r\n    };\r\n    GridRow.prototype.isFloatingBottom = function () {\r\n        return this.floating === constants_1.Constants.PINNED_BOTTOM;\r\n    };\r\n    GridRow.prototype.isNotFloating = function () {\r\n        return !this.isFloatingBottom() && !this.isFloatingTop();\r\n    };\r\n    GridRow.prototype.equals = function (otherSelection) {\r\n        return this.rowIndex === otherSelection.rowIndex\r\n            && this.floating === otherSelection.floating;\r\n    };\r\n    GridRow.prototype.toString = function () {\r\n        return \"rowIndex = \" + this.rowIndex + \", floating = \" + this.floating;\r\n    };\r\n    GridRow.prototype.getGridCell = function (column) {\r\n        var gridCellDef = { rowIndex: this.rowIndex, floating: this.floating, column: column };\r\n        return new gridCell_1.GridCell(gridCellDef);\r\n    };\r\n    // tests if this row selection is before the other row selection\r\n    GridRow.prototype.before = function (otherSelection) {\r\n        var otherFloating = otherSelection.floating;\r\n        switch (this.floating) {\r\n            case constants_1.Constants.PINNED_TOP:\r\n                // we we are floating top, and other isn't, then we are always before\r\n                if (otherFloating !== constants_1.Constants.PINNED_TOP) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case constants_1.Constants.PINNED_BOTTOM:\r\n                // if we are floating bottom, and the other isn't, then we are never before\r\n                if (otherFloating !== constants_1.Constants.PINNED_BOTTOM) {\r\n                    return false;\r\n                }\r\n                break;\r\n            default:\r\n                // if we are not floating, but the other one is floating...\r\n                if (utils_1.Utils.exists(otherFloating)) {\r\n                    if (otherFloating === constants_1.Constants.PINNED_TOP) {\r\n                        // we are not floating, other is floating top, we are first\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        // we are not floating, other is floating bottom, we are always first\r\n                        return true;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        return this.rowIndex < otherSelection.rowIndex;\r\n    };\r\n    return GridRow;\r\n}());\r\nexports.GridRow = GridRow;\r\n",null]}