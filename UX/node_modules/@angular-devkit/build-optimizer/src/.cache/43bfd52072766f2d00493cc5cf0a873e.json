{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\layout\\borderLayout.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\layout\\borderLayout.js","mtime":1525243699371},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\n// This should be a component\r\nvar BorderLayout = /*@__PURE__*/ (function () {\r\n    function BorderLayout(params) {\r\n        this.centerHeightLastTime = -1;\r\n        this.centerWidthLastTime = -1;\r\n        this.centerLeftMarginLastTime = -1;\r\n        this.visibleLastTime = false;\r\n        this.sizeChangeListeners = [];\r\n        this.isLayoutPanel = true;\r\n        this.noNorthOrSouth = !params.north && !params.south;\r\n        var template;\r\n        if (params.forPrint) {\r\n            template = BorderLayout.TEMPLATE_DONT_FILL;\r\n            this.horizontalLayoutActive = false;\r\n            this.verticalLayoutActive = false;\r\n        }\r\n        else if (params.autoHeight) {\r\n            template = BorderLayout.TEMPLATE_DONT_FILL;\r\n            this.horizontalLayoutActive = true;\r\n            this.verticalLayoutActive = false;\r\n        }\r\n        else {\r\n            if (this.noNorthOrSouth) {\r\n                template = BorderLayout.TEMPLATE_FULL_HEIGHT;\r\n            }\r\n            else {\r\n                template = BorderLayout.TEMPLATE_NORMAL;\r\n            }\r\n            this.horizontalLayoutActive = true;\r\n            this.verticalLayoutActive = true;\r\n        }\r\n        this.eGui = utils_1.Utils.loadTemplate(template);\r\n        this.id = 'borderLayout';\r\n        if (params.name) {\r\n            this.id += '_' + params.name;\r\n        }\r\n        this.eGui.setAttribute('id', this.id);\r\n        this.childPanels = [];\r\n        if (params) {\r\n            this.setupPanels(params);\r\n        }\r\n        if (params.componentRecipes) {\r\n            this.overlayWrapper = params.componentRecipes.newOverlayWrapperComponent();\r\n        }\r\n    }\r\n    BorderLayout.prototype.addSizeChangeListener = function (listener) {\r\n        this.sizeChangeListeners.push(listener);\r\n    };\r\n    BorderLayout.prototype.fireSizeChanged = function () {\r\n        this.sizeChangeListeners.forEach(function (listener) {\r\n            listener();\r\n        });\r\n    };\r\n    // this logic is also in Component.ts - the plan is sometime in the future,\r\n    // this layout panel may (or may not) extend the Component class, and somehow\r\n    // act as a component.\r\n    BorderLayout.prototype.getRefElement = function (refName) {\r\n        return this.eGui.querySelector('[ref=\"' + refName + '\"]');\r\n    };\r\n    BorderLayout.prototype.setupPanels = function (params) {\r\n        this.eNorthWrapper = this.getRefElement('north');\r\n        this.eSouthWrapper = this.getRefElement('south');\r\n        this.eEastWrapper = this.getRefElement('east');\r\n        this.eWestWrapper = this.getRefElement('west');\r\n        this.eCenterWrapper = this.getRefElement('center');\r\n        this.eOverlayWrapper = this.getRefElement('overlay');\r\n        this.eCenterRow = this.getRefElement('centerRow');\r\n        // initially hide the overlay. this is needed for IE10, if we don't hide the overlay,\r\n        // then it grabs mouse events, and it blocks clicking on the grid (as the overlay consumes\r\n        // the mouse events).\r\n        this.eOverlayWrapper.style.display = 'none';\r\n        this.eNorthChildLayout = this.setupPanel(params.north, this.eNorthWrapper);\r\n        this.eSouthChildLayout = this.setupPanel(params.south, this.eSouthWrapper);\r\n        this.eEastChildLayout = this.setupPanel(params.east, this.eEastWrapper);\r\n        this.eWestChildLayout = this.setupPanel(params.west, this.eWestWrapper);\r\n        this.eCenterChildLayout = this.setupPanel(params.center, this.eCenterWrapper);\r\n    };\r\n    BorderLayout.prototype.setupPanel = function (content, ePanel) {\r\n        if (!ePanel) {\r\n            return;\r\n        }\r\n        if (content) {\r\n            if (content.isLayoutPanel) {\r\n                this.childPanels.push(content);\r\n                ePanel.appendChild(content.getGui());\r\n                return content;\r\n            }\r\n            else {\r\n                ePanel.appendChild(content);\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            ePanel.parentNode.removeChild(ePanel);\r\n            return null;\r\n        }\r\n    };\r\n    BorderLayout.prototype.getGui = function () {\r\n        return this.eGui;\r\n    };\r\n    // returns true if any item changed size, otherwise returns false\r\n    BorderLayout.prototype.doLayout = function () {\r\n        var _this = this;\r\n        var isVisible = utils_1.Utils.isVisible(this.eGui);\r\n        if (!isVisible) {\r\n            this.visibleLastTime = false;\r\n            return false;\r\n        }\r\n        var atLeastOneChanged = false;\r\n        if (this.visibleLastTime !== isVisible) {\r\n            atLeastOneChanged = true;\r\n        }\r\n        this.visibleLastTime = true;\r\n        var childLayouts = [this.eNorthChildLayout, this.eSouthChildLayout, this.eEastChildLayout, this.eWestChildLayout];\r\n        childLayouts.forEach(function (childLayout) {\r\n            var childChangedSize = _this.layoutChild(childLayout);\r\n            if (childChangedSize) {\r\n                atLeastOneChanged = true;\r\n            }\r\n        });\r\n        if (this.horizontalLayoutActive) {\r\n            var ourWidthChanged = this.layoutWidth();\r\n            if (ourWidthChanged) {\r\n                atLeastOneChanged = true;\r\n            }\r\n        }\r\n        if (this.verticalLayoutActive) {\r\n            // layout center to match heights of east and west\r\n            var ourHeightChanged = this.layoutHeight();\r\n            if (ourHeightChanged) {\r\n                atLeastOneChanged = true;\r\n            }\r\n        }\r\n        else {\r\n            // layout east and west to be same height as center,\r\n            // otherwise the tool panel doesn't size right\r\n            var ourHeightChanged = this.layoutEastWestHeight();\r\n            if (ourHeightChanged) {\r\n                atLeastOneChanged = true;\r\n            }\r\n        }\r\n        var centerChanged = this.layoutChild(this.eCenterChildLayout);\r\n        if (centerChanged) {\r\n            atLeastOneChanged = true;\r\n        }\r\n        if (atLeastOneChanged) {\r\n            this.fireSizeChanged();\r\n        }\r\n        return atLeastOneChanged;\r\n    };\r\n    BorderLayout.prototype.layoutChild = function (childPanel) {\r\n        if (childPanel) {\r\n            return childPanel.doLayout();\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    BorderLayout.prototype.layoutHeight = function () {\r\n        if (this.noNorthOrSouth) {\r\n            return this.layoutHeightFullHeight();\r\n        }\r\n        else {\r\n            return this.layoutHeightNormal();\r\n        }\r\n    };\r\n    // full height never changes the height, because the center is always 100%,\r\n    // however we do check for change, to inform the listeners\r\n    BorderLayout.prototype.layoutHeightFullHeight = function () {\r\n        var centerHeight = utils_1.Utils.offsetHeight(this.eGui);\r\n        if (centerHeight < 0) {\r\n            centerHeight = 0;\r\n        }\r\n        if (this.centerHeightLastTime !== centerHeight) {\r\n            this.centerHeightLastTime = centerHeight;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    BorderLayout.prototype.layoutHeightNormal = function () {\r\n        var totalHeight = utils_1.Utils.offsetHeight(this.eGui);\r\n        var northHeight = utils_1.Utils.offsetHeight(this.eNorthWrapper);\r\n        var southHeight = utils_1.Utils.offsetHeight(this.eSouthWrapper);\r\n        var centerHeight = totalHeight - northHeight - southHeight;\r\n        if (centerHeight < 0) {\r\n            centerHeight = 0;\r\n        }\r\n        if (this.centerHeightLastTime !== centerHeight) {\r\n            this.eCenterRow.style.height = centerHeight + 'px';\r\n            this.centerHeightLastTime = centerHeight;\r\n            return true; // return true because there was a change\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    BorderLayout.prototype.layoutEastWestHeight = function () {\r\n        var centerHeight = utils_1.Utils.offsetHeight(this.eCenterRow);\r\n        if (this.centerHeightLastTime !== centerHeight) {\r\n            if (this.eEastWrapper) {\r\n                this.eEastWrapper.style.height = centerHeight + 'px';\r\n            }\r\n            if (this.eWestWrapper) {\r\n                this.eWestWrapper.style.height = centerHeight + 'px';\r\n            }\r\n            this.centerHeightLastTime = centerHeight;\r\n            return true; // return true because there was a change\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    BorderLayout.prototype.getCentreHeight = function () {\r\n        return this.centerHeightLastTime;\r\n    };\r\n    BorderLayout.prototype.layoutWidth = function () {\r\n        var totalWidth = utils_1.Utils.offsetWidth(this.eGui);\r\n        var eastWidth = utils_1.Utils.offsetWidth(this.eEastWrapper);\r\n        var westWidth = utils_1.Utils.offsetWidth(this.eWestWrapper);\r\n        var centerWidth = totalWidth - eastWidth - westWidth;\r\n        if (centerWidth < 0) {\r\n            centerWidth = 0;\r\n        }\r\n        var atLeastOneChanged = false;\r\n        if (this.centerLeftMarginLastTime !== westWidth) {\r\n            this.centerLeftMarginLastTime = westWidth;\r\n            this.eCenterWrapper.style.marginLeft = westWidth + 'px';\r\n            atLeastOneChanged = true;\r\n        }\r\n        if (this.centerWidthLastTime !== centerWidth) {\r\n            this.centerWidthLastTime = centerWidth;\r\n            this.eCenterWrapper.style.width = centerWidth + 'px';\r\n            atLeastOneChanged = true;\r\n        }\r\n        return atLeastOneChanged;\r\n    };\r\n    BorderLayout.prototype.setEastVisible = function (visible) {\r\n        if (this.eEastWrapper) {\r\n            this.eEastWrapper.style.display = visible ? '' : 'none';\r\n        }\r\n        this.doLayout();\r\n    };\r\n    BorderLayout.prototype.showLoadingOverlay = function () {\r\n        this.overlayWrapper.showLoadingOverlay(this.eOverlayWrapper);\r\n    };\r\n    BorderLayout.prototype.showNoRowsOverlay = function () {\r\n        this.overlayWrapper.showNoRowsOverlay(this.eOverlayWrapper);\r\n    };\r\n    BorderLayout.prototype.hideOverlay = function () {\r\n        this.overlayWrapper.hideOverlay(this.eOverlayWrapper);\r\n    };\r\n    // this is used if there user has not specified any north or south parts\r\n    BorderLayout.TEMPLATE_FULL_HEIGHT = '<div class=\"ag-bl ag-bl-full-height\">' +\r\n        '  <div class=\"ag-bl-west ag-bl-full-height-west\" ref=\"west\"></div>' +\r\n        '  <div class=\"ag-bl-east ag-bl-full-height-east\" ref=\"east\"></div>' +\r\n        '  <div class=\"ag-bl-center ag-bl-full-height-center\" ref=\"center\"></div>' +\r\n        '  <div class=\"ag-bl-overlay\" ref=\"overlay\"></div>' +\r\n        '</div>';\r\n    BorderLayout.TEMPLATE_NORMAL = '<div class=\"ag-bl ag-bl-normal\">' +\r\n        '  <div ref=\"north\"></div>' +\r\n        '  <div class=\"ag-bl-center-row ag-bl-normal-center-row\" ref=\"centerRow\">' +\r\n        '    <div class=\"ag-bl-west ag-bl-normal-west\" ref=\"west\"></div>' +\r\n        '    <div class=\"ag-bl-east ag-bl-normal-east\" ref=\"east\"></div>' +\r\n        '    <div class=\"ag-bl-center ag-bl-normal-center\" ref=\"center\"></div>' +\r\n        '  </div>' +\r\n        '  <div ref=\"south\"></div>' +\r\n        '  <div class=\"ag-bl-overlay\" ref=\"overlay\"></div>' +\r\n        '</div>';\r\n    BorderLayout.TEMPLATE_DONT_FILL = '<div class=\"ag-bl ag-bl-dont-fill\">' +\r\n        '  <div ref=\"north\"></div>' +\r\n        '  <div ref=\"centerRow\" class=\"ag-bl-center-row ag-bl-dont-fill-center-row\">' +\r\n        '    <div ref=\"west\" class=\"ag-bl-west ag-bl-dont-fill-west\"></div>' +\r\n        '    <div ref=\"east\" class=\"ag-bl-east ag-bl-dont-fill-east\"></div>' +\r\n        '    <div ref=\"center\" class=\"ag-bl-center ag-bl-dont-fill-center\"></div>' +\r\n        '  </div>' +\r\n        '  <div ref=\"south\"></div>' +\r\n        '  <div class=\"ag-bl-overlay\" ref=\"overlay\"></div>' +\r\n        '</div>';\r\n    return BorderLayout;\r\n}());\r\nexports.BorderLayout = BorderLayout;\r\n",null]}