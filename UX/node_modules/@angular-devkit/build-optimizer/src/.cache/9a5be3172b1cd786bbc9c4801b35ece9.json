{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\rendering\\cellEditors\\textCellEditor.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\rendering\\cellEditors\\textCellEditor.js","mtime":1525243699918},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar constants_1 = require(\"../../constants\");\r\nvar component_1 = require(\"../../widgets/component\");\r\nvar utils_1 = require(\"../../utils\");\r\nvar TextCellEditor = /*@__PURE__*/ (function (_super) {\r\n    __extends(TextCellEditor, _super);\r\n    function TextCellEditor() {\r\n        return _super.call(this, TextCellEditor.TEMPLATE) || this;\r\n    }\r\n    TextCellEditor.prototype.init = function (params) {\r\n        this.params = params;\r\n        var eInput = this.getGui();\r\n        var startValue;\r\n        // cellStartedEdit is only false if we are doing fullRow editing\r\n        if (params.cellStartedEdit) {\r\n            this.focusAfterAttached = true;\r\n            var keyPressBackspaceOrDelete = params.keyPress === constants_1.Constants.KEY_BACKSPACE\r\n                || params.keyPress === constants_1.Constants.KEY_DELETE;\r\n            if (keyPressBackspaceOrDelete) {\r\n                startValue = '';\r\n            }\r\n            else if (params.charPress) {\r\n                startValue = params.charPress;\r\n            }\r\n            else {\r\n                startValue = this.getStartValue(params);\r\n                if (params.keyPress !== constants_1.Constants.KEY_F2) {\r\n                    this.highlightAllOnFocus = true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.focusAfterAttached = false;\r\n            startValue = this.getStartValue(params);\r\n        }\r\n        if (utils_1.Utils.exists(startValue)) {\r\n            eInput.value = startValue;\r\n        }\r\n        this.addDestroyableEventListener(eInput, 'keydown', function (event) {\r\n            var isNavigationKey = event.keyCode === constants_1.Constants.KEY_LEFT\r\n                || event.keyCode === constants_1.Constants.KEY_RIGHT\r\n                || event.keyCode === constants_1.Constants.KEY_UP\r\n                || event.keyCode === constants_1.Constants.KEY_DOWN\r\n                || event.keyCode === constants_1.Constants.KEY_PAGE_DOWN\r\n                || event.keyCode === constants_1.Constants.KEY_PAGE_UP\r\n                || event.keyCode === constants_1.Constants.KEY_PAGE_HOME\r\n                || event.keyCode === constants_1.Constants.KEY_PAGE_END;\r\n            if (isNavigationKey) {\r\n                // this stops the grid from executing keyboard navigation\r\n                event.stopPropagation();\r\n                // this stops the browser from scrolling up / down\r\n                var pageUp = event.keyCode === constants_1.Constants.KEY_PAGE_UP;\r\n                var pageDown = event.keyCode === constants_1.Constants.KEY_PAGE_DOWN;\r\n                if (pageUp || pageDown) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    TextCellEditor.prototype.afterGuiAttached = function () {\r\n        if (!this.focusAfterAttached) {\r\n            return;\r\n        }\r\n        var eInput = this.getGui();\r\n        eInput.focus();\r\n        if (this.highlightAllOnFocus) {\r\n            eInput.select();\r\n        }\r\n        else {\r\n            // when we started editing, we want the carot at the end, not the start.\r\n            // this comes into play in two scenarios: a) when user hits F2 and b)\r\n            // when user hits a printable character, then on IE (and only IE) the carot\r\n            // was placed after the first character, thus 'apply' would end up as 'pplea'\r\n            var length_1 = eInput.value ? eInput.value.length : 0;\r\n            if (length_1 > 0) {\r\n                eInput.setSelectionRange(length_1, length_1);\r\n            }\r\n        }\r\n    };\r\n    // gets called when tabbing trough cells and in full row edit mode\r\n    TextCellEditor.prototype.focusIn = function () {\r\n        var eInput = this.getGui();\r\n        eInput.focus();\r\n        eInput.select();\r\n    };\r\n    TextCellEditor.prototype.getValue = function () {\r\n        var eInput = this.getGui();\r\n        return this.params.parseValue(eInput.value);\r\n    };\r\n    TextCellEditor.prototype.getStartValue = function (params) {\r\n        var formatValue = params.useFormatter || params.column.getColDef().refData;\r\n        return formatValue ? params.formatValue(params.value) : params.value;\r\n    };\r\n    TextCellEditor.TEMPLATE = '<input class=\"ag-cell-edit-input\" type=\"text\"/>';\r\n    return TextCellEditor;\r\n}(component_1.Component));\r\nexports.TextCellEditor = TextCellEditor;\r\n",null]}