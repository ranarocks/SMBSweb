{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\widgets\\touchListener.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\widgets\\touchListener.js","mtime":1525243700390},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar eventService_1 = require(\"../eventService\");\r\nvar utils_1 = require(\"../utils\");\r\nvar TouchListener = /*@__PURE__*/ (function () {\r\n    function TouchListener(eElement, preventMouseClick) {\r\n        if (preventMouseClick === void 0) {\r\n            preventMouseClick = false;\r\n        }\r\n        var _this = this;\r\n        this.destroyFuncs = [];\r\n        this.touching = false;\r\n        this.eventService = new eventService_1.EventService();\r\n        this.eElement = eElement;\r\n        this.preventMouseClick = preventMouseClick;\r\n        var startListener = this.onTouchStart.bind(this);\r\n        var moveListener = this.onTouchMove.bind(this);\r\n        var endListener = this.onTouchEnd.bind(this);\r\n        this.eElement.addEventListener(\"touchstart\", startListener, { passive: true });\r\n        this.eElement.addEventListener(\"touchmove\", moveListener, { passive: true });\r\n        // we set passive=false, as we want to prevent default on this event\r\n        this.eElement.addEventListener(\"touchend\", endListener, { passive: false });\r\n        this.destroyFuncs.push(function () {\r\n            _this.eElement.addEventListener(\"touchstart\", startListener, { passive: true });\r\n            _this.eElement.addEventListener(\"touchmove\", moveListener, { passive: true });\r\n            _this.eElement.addEventListener(\"touchend\", endListener, { passive: false });\r\n        });\r\n    }\r\n    TouchListener.prototype.getActiveTouch = function (touchList) {\r\n        for (var i = 0; i < touchList.length; i++) {\r\n            var matches = touchList[i].identifier === this.touchStart.identifier;\r\n            if (matches) {\r\n                return touchList[i];\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TouchListener.prototype.addEventListener = function (eventType, listener) {\r\n        this.eventService.addEventListener(eventType, listener);\r\n    };\r\n    TouchListener.prototype.removeEventListener = function (eventType, listener) {\r\n        this.eventService.removeEventListener(eventType, listener);\r\n    };\r\n    TouchListener.prototype.onTouchStart = function (touchEvent) {\r\n        var _this = this;\r\n        // only looking at one touch point at any time\r\n        if (this.touching) {\r\n            return;\r\n        }\r\n        this.touchStart = touchEvent.touches[0];\r\n        this.touching = true;\r\n        this.moved = false;\r\n        var touchStartCopy = this.touchStart;\r\n        setTimeout(function () {\r\n            var touchesMatch = _this.touchStart === touchStartCopy;\r\n            if (_this.touching && touchesMatch && !_this.moved) {\r\n                _this.moved = true;\r\n                var event_1 = {\r\n                    type: TouchListener.EVENT_LONG_TAP,\r\n                    touchStart: _this.touchStart,\r\n                    touchEvent: touchEvent\r\n                };\r\n                _this.eventService.dispatchEvent(event_1);\r\n            }\r\n        }, 500);\r\n    };\r\n    TouchListener.prototype.onTouchMove = function (touchEvent) {\r\n        if (!this.touching) {\r\n            return;\r\n        }\r\n        var touch = this.getActiveTouch(touchEvent.touches);\r\n        if (!touch) {\r\n            return;\r\n        }\r\n        var eventIsFarAway = !utils_1.Utils.areEventsNear(touch, this.touchStart, 4);\r\n        if (eventIsFarAway) {\r\n            this.moved = true;\r\n        }\r\n    };\r\n    TouchListener.prototype.onTouchEnd = function (touchEvent) {\r\n        if (!this.touching) {\r\n            return;\r\n        }\r\n        if (!this.moved) {\r\n            var event_2 = {\r\n                type: TouchListener.EVENT_TAP,\r\n                touchStart: this.touchStart\r\n            };\r\n            this.eventService.dispatchEvent(event_2);\r\n            this.checkForDoubleTap();\r\n            // stops the tap from also been processed as a mouse click\r\n            if (this.preventMouseClick) {\r\n                touchEvent.preventDefault();\r\n            }\r\n        }\r\n        this.touching = false;\r\n    };\r\n    TouchListener.prototype.checkForDoubleTap = function () {\r\n        var now = new Date().getTime();\r\n        if (this.lastTapTime > 0) {\r\n            // if previous tap, see if duration is short enough to be considered double tap\r\n            var interval = now - this.lastTapTime;\r\n            if (interval > TouchListener.DOUBLE_TAP_MILLIS) {\r\n                // dispatch double tap event\r\n                var event_3 = {\r\n                    type: TouchListener.EVENT_DOUBLE_TAP,\r\n                    touchStart: this.touchStart\r\n                };\r\n                this.eventService.dispatchEvent(event_3);\r\n                // this stops a tripple tap ending up as two double taps\r\n                this.lastTapTime = null;\r\n            }\r\n            else {\r\n                this.lastTapTime = now;\r\n            }\r\n        }\r\n        else {\r\n            this.lastTapTime = now;\r\n        }\r\n    };\r\n    TouchListener.prototype.destroy = function () {\r\n        this.destroyFuncs.forEach(function (func) { return func(); });\r\n    };\r\n    TouchListener.EVENT_TAP = \"tap\";\r\n    TouchListener.EVENT_DOUBLE_TAP = \"doubleTap\";\r\n    TouchListener.EVENT_LONG_TAP = \"longTap\";\r\n    TouchListener.DOUBLE_TAP_MILLIS = 500;\r\n    return TouchListener;\r\n}());\r\nexports.TouchListener = TouchListener;\r\n",null]}