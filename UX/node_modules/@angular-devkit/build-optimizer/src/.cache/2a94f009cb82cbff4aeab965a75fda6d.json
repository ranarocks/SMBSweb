{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\headerRendering\\headerRowComp.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\headerRendering\\headerRowComp.js","mtime":1525243698903},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v17.1.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar component_1 = require(\"../widgets/component\");\nvar context_1 = require(\"../context/context\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar columnController_1 = require(\"../columnController/columnController\");\nvar column_1 = require(\"../entities/column\");\nvar eventService_1 = require(\"../eventService\");\nvar events_1 = require(\"../events\");\nvar utils_1 = require(\"../utils\");\nvar headerWrapperComp_1 = require(\"./header/headerWrapperComp\");\nvar headerGroupWrapperComp_1 = require(\"./headerGroup/headerGroupWrapperComp\");\nvar filterManager_1 = require(\"../filter/filterManager\");\nvar componentRecipes_1 = require(\"../components/framework/componentRecipes\");\nvar gridApi_1 = require(\"../gridApi\");\nvar HeaderRowType = exports.HeaderRowType = /*@__PURE__*/ (function (HeaderRowType) {\n    HeaderRowType[HeaderRowType[\"COLUMN_GROUP\"] = 0] = \"COLUMN_GROUP\";\n    HeaderRowType[HeaderRowType[\"COLUMN\"] = 1] = \"COLUMN\";\n    HeaderRowType[HeaderRowType[\"FLOATING_FILTER\"] = 2] = \"FLOATING_FILTER\";\n    return HeaderRowType;\n})(exports.HeaderRowType || {});\nvar HeaderRowComp = /*@__PURE__*/ (function (_super) {\n    __extends(HeaderRowComp, _super);\n    function HeaderRowComp(dept, type, pinned, dropTarget) {\n        var _this = _super.call(this, \"<div class=\\\"ag-header-row\\\" role=\\\"presentation\\\"/>\") || this;\n        _this.headerComps = {};\n        _this.dept = dept;\n        _this.type = type;\n        _this.pinned = pinned;\n        _this.dropTarget = dropTarget;\n        return _this;\n    }\n    HeaderRowComp.prototype.forEachHeaderElement = function (callback) {\n        var _this = this;\n        Object.keys(this.headerComps).forEach(function (key) {\n            callback(_this.headerComps[key]);\n        });\n    };\n    HeaderRowComp.prototype.destroy = function () {\n        var idsOfAllChildren = Object.keys(this.headerComps);\n        this.removeAndDestroyChildComponents(idsOfAllChildren);\n        _super.prototype.destroy.call(this);\n    };\n    HeaderRowComp.prototype.removeAndDestroyChildComponents = function (idsToDestroy) {\n        var _this = this;\n        idsToDestroy.forEach(function (id) {\n            var childHeaderComp = _this.headerComps[id];\n            _this.getGui().removeChild(childHeaderComp.getGui());\n            if (childHeaderComp.destroy) {\n                childHeaderComp.destroy();\n            }\n            delete _this.headerComps[id];\n        });\n    };\n    HeaderRowComp.prototype.onRowHeightChanged = function () {\n        var headerRowCount = this.columnController.getHeaderRowCount();\n        var sizes = [];\n        var numberOfFloating = 0;\n        var groupHeight;\n        var headerHeight;\n        if (!this.columnController.isPivotMode()) {\n            if (this.gridOptionsWrapper.isFloatingFilter()) {\n                headerRowCount++;\n            }\n            numberOfFloating = (this.gridOptionsWrapper.isFloatingFilter()) ? 1 : 0;\n            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();\n            headerHeight = this.gridOptionsWrapper.getHeaderHeight();\n        }\n        else {\n            numberOfFloating = 0;\n            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();\n            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();\n        }\n        var numberOfNonGroups = 1 + numberOfFloating;\n        var numberOfGroups = headerRowCount - numberOfNonGroups;\n        for (var i = 0; i < numberOfGroups; i++) {\n            sizes.push(groupHeight);\n        }\n        sizes.push(headerHeight);\n        for (var i = 0; i < numberOfFloating; i++) {\n            sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight());\n        }\n        var rowHeight = 0;\n        for (var i = 0; i < this.dept; i++) {\n            rowHeight += sizes[i];\n        }\n        this.getGui().style.top = rowHeight + 'px';\n        this.getGui().style.height = sizes[this.dept] + 'px';\n    };\n    //noinspection JSUnusedLocalSymbols\n    HeaderRowComp.prototype.init = function () {\n        this.onRowHeightChanged();\n        this.onVirtualColumnsChanged();\n        this.setWidth();\n        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));\n        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));\n        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n    };\n    HeaderRowComp.prototype.onColumnResized = function () {\n        this.setWidth();\n    };\n    HeaderRowComp.prototype.setWidth = function () {\n        var mainRowWidth = this.columnController.getContainerWidth(this.pinned) + 'px';\n        this.getGui().style.width = mainRowWidth;\n    };\n    HeaderRowComp.prototype.onGridColumnsChanged = function () {\n        this.removeAndDestroyAllChildComponents();\n    };\n    HeaderRowComp.prototype.removeAndDestroyAllChildComponents = function () {\n        var idsOfAllChildren = Object.keys(this.headerComps);\n        this.removeAndDestroyChildComponents(idsOfAllChildren);\n    };\n    HeaderRowComp.prototype.onDisplayedColumnsChanged = function () {\n        this.onVirtualColumnsChanged();\n        this.setWidth();\n    };\n    HeaderRowComp.prototype.onVirtualColumnsChanged = function () {\n        var _this = this;\n        var currentChildIds = Object.keys(this.headerComps);\n        var itemsAtDepth = this.columnController.getVirtualHeaderGroupRow(this.pinned, this.type == HeaderRowType.FLOATING_FILTER ?\n            this.dept - 1 :\n            this.dept);\n        var ensureDomOrder = this.gridOptionsWrapper.isEnsureDomOrder();\n        var eBefore;\n        itemsAtDepth.forEach(function (child) {\n            // skip groups that have no displayed children. this can happen when the group is broken,\n            // and this section happens to have nothing to display for the open / closed state.\n            // (a broken group is one that is split, ie columns in the group have a non-group column\n            // in between them)\n            if (child.isEmptyGroup()) {\n                return;\n            }\n            var idOfChild = child.getUniqueId();\n            var eParentContainer = _this.getGui();\n            // if we already have this cell rendered, do nothing\n            var colAlreadyInDom = currentChildIds.indexOf(idOfChild) >= 0;\n            var headerComp;\n            var eHeaderCompGui;\n            if (colAlreadyInDom) {\n                utils_1.Utils.removeFromArray(currentChildIds, idOfChild);\n                headerComp = _this.headerComps[idOfChild];\n                eHeaderCompGui = headerComp.getGui();\n                if (ensureDomOrder) {\n                    utils_1.Utils.ensureDomOrder(eParentContainer, eHeaderCompGui, eBefore);\n                }\n                eBefore = eHeaderCompGui;\n            }\n            else {\n                headerComp = _this.createHeaderComp(child);\n                _this.headerComps[idOfChild] = headerComp;\n                eHeaderCompGui = headerComp.getGui();\n                if (ensureDomOrder) {\n                    utils_1.Utils.insertWithDomOrder(eParentContainer, eHeaderCompGui, eBefore);\n                }\n                else {\n                    eParentContainer.appendChild(eHeaderCompGui);\n                }\n                eBefore = eHeaderCompGui;\n            }\n        });\n        // at this point, anything left in currentChildIds is an element that is no longer in the viewport\n        this.removeAndDestroyChildComponents(currentChildIds);\n    };\n    HeaderRowComp.prototype.createHeaderComp = function (columnGroupChild) {\n        var result;\n        switch (this.type) {\n            case HeaderRowType.COLUMN:\n                result = new headerWrapperComp_1.HeaderWrapperComp(columnGroupChild, this.dropTarget, this.pinned);\n                break;\n            case HeaderRowType.COLUMN_GROUP:\n                result = new headerGroupWrapperComp_1.HeaderGroupWrapperComp(columnGroupChild, this.dropTarget, this.pinned);\n                break;\n            case HeaderRowType.FLOATING_FILTER:\n                var column = columnGroupChild;\n                result = this.createFloatingFilterWrapper(column);\n                break;\n        }\n        this.context.wireBean(result);\n        return result;\n    };\n    HeaderRowComp.prototype.createFloatingFilterWrapper = function (column) {\n        var _this = this;\n        var floatingFilterParams = this.createFloatingFilterParams(column);\n        var floatingFilterWrapper = this.componentRecipes.newFloatingFilterWrapperComponent(column, floatingFilterParams);\n        this.addDestroyableEventListener(column, column_1.Column.EVENT_FILTER_CHANGED, function () {\n            var filterComponentPromise = _this.filterManager.getFilterComponent(column);\n            floatingFilterWrapper.onParentModelChanged(filterComponentPromise.resolveNow(null, function (filter) { return filter.getModel(); }));\n        });\n        var cachedFilter = this.filterManager.cachedFilter(column);\n        if (cachedFilter) {\n            var filterComponentPromise = this.filterManager.getFilterComponent(column);\n            floatingFilterWrapper.onParentModelChanged(filterComponentPromise.resolveNow(null, function (filter) { return filter.getModel(); }));\n        }\n        return floatingFilterWrapper;\n    };\n    HeaderRowComp.prototype.createFloatingFilterParams = function (column) {\n        var _this = this;\n        // We always get the freshest reference to the baseFilter because the filters get sometimes created\n        // and destroyed between calls\n        //\n        // let filterComponent:BaseFilter<any, any, any> = <any>this.filterManager.getFilterComponent(column);\n        //\n        var baseParams = {\n            api: this.gridApi,\n            column: column,\n            currentParentModel: function () {\n                var filterComponentPromise = _this.filterManager.getFilterComponent(column);\n                return filterComponentPromise.resolveNow(null, function (filter) {\n                    return (filter.getNullableModel) ?\n                        filter.getNullableModel() :\n                        filter.getModel();\n                });\n            },\n            onFloatingFilterChanged: function (change) {\n                var captureModelChangedResolveFunc;\n                var modelChanged = new utils_1.Promise(function (resolve) {\n                    captureModelChangedResolveFunc = resolve;\n                });\n                var filterComponentPromise = _this.filterManager.getFilterComponent(column);\n                filterComponentPromise.then(function (filterComponent) {\n                    if (filterComponent.onFloatingFilterChanged) {\n                        //If going through this branch of code the user MUST\n                        //be passing an object of type change that contains\n                        //a model propery inside and some other stuff\n                        var result = filterComponent.onFloatingFilterChanged(change);\n                        captureModelChangedResolveFunc(result);\n                    }\n                    else {\n                        //If going through this branch of code the user MUST\n                        //be passing the plain model and delegating to ag-Grid\n                        //the responsibility to set the parent model and refresh\n                        //the filters\n                        filterComponent.setModel(change);\n                        _this.filterManager.onFilterChanged();\n                        captureModelChangedResolveFunc(true);\n                    }\n                });\n                return modelChanged.resolveNow(true, function (modelChanged) { return modelChanged; });\n            },\n            //This one might be overriden from the colDef\n            suppressFilterButton: false\n        };\n        return baseParams;\n    };\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], HeaderRowComp.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        context_1.Autowired('gridApi'),\n        __metadata(\"design:type\", gridApi_1.GridApi)\n    ], HeaderRowComp.prototype, \"gridApi\", void 0);\n    __decorate([\n        context_1.Autowired('columnController'),\n        __metadata(\"design:type\", columnController_1.ColumnController)\n    ], HeaderRowComp.prototype, \"columnController\", void 0);\n    __decorate([\n        context_1.Autowired('context'),\n        __metadata(\"design:type\", context_1.Context)\n    ], HeaderRowComp.prototype, \"context\", void 0);\n    __decorate([\n        context_1.Autowired('eventService'),\n        __metadata(\"design:type\", eventService_1.EventService)\n    ], HeaderRowComp.prototype, \"eventService\", void 0);\n    __decorate([\n        context_1.Autowired('filterManager'),\n        __metadata(\"design:type\", filterManager_1.FilterManager)\n    ], HeaderRowComp.prototype, \"filterManager\", void 0);\n    __decorate([\n        context_1.Autowired('componentRecipes'),\n        __metadata(\"design:type\", componentRecipes_1.ComponentRecipes)\n    ], HeaderRowComp.prototype, \"componentRecipes\", void 0);\n    __decorate([\n        context_1.PostConstruct,\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], HeaderRowComp.prototype, \"init\", null);\n    return HeaderRowComp;\n}(component_1.Component));\nexports.HeaderRowComp = HeaderRowComp;\n",null]}