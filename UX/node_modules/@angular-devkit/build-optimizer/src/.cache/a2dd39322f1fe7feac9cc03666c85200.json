{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\rowModels\\inMemory\\changedPath.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\rowModels\\inMemory\\changedPath.js","mtime":1525243700193},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ChangedPath = /*@__PURE__*/ (function () {\r\n    function ChangedPath(keepingColumns) {\r\n        this.active = true;\r\n        this.nodeIdsToBoolean = {};\r\n        this.nodeIdsToColumns = {};\r\n        this.keepingColumns = keepingColumns;\r\n    }\r\n    ChangedPath.prototype.setInactive = function () {\r\n        this.active = false;\r\n    };\r\n    ChangedPath.prototype.isActive = function () {\r\n        return this.active;\r\n    };\r\n    ChangedPath.prototype.addParentNode = function (rowNode, columns) {\r\n        var _this = this;\r\n        this.validateActive();\r\n        var pointer = rowNode;\r\n        while (pointer) {\r\n            // add this item to the path, all the way to parent\r\n            this.nodeIdsToBoolean[pointer.id] = true;\r\n            // if columns, add the columns in all the way to parent, merging\r\n            // in any other columns that might be there already\r\n            if (this.keepingColumns && columns) {\r\n                if (!this.nodeIdsToColumns[pointer.id]) {\r\n                    this.nodeIdsToColumns[pointer.id] = {};\r\n                }\r\n                columns.forEach(function (col) { return _this.nodeIdsToColumns[pointer.id][col.getId()] = true; });\r\n            }\r\n            pointer = pointer.parent;\r\n        }\r\n    };\r\n    ChangedPath.prototype.isInPath = function (rowNode) {\r\n        this.validateActive();\r\n        return this.nodeIdsToBoolean[rowNode.id];\r\n    };\r\n    ChangedPath.prototype.getValueColumnsForNode = function (rowNode, valueColumns) {\r\n        this.validateActive();\r\n        if (!this.keepingColumns) {\r\n            return valueColumns;\r\n        }\r\n        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];\r\n        var result = valueColumns.filter(function (col) { return colsForThisNode[col.getId()]; });\r\n        return result;\r\n    };\r\n    ChangedPath.prototype.getNotValueColumnsForNode = function (rowNode, valueColumns) {\r\n        this.validateActive();\r\n        if (!this.keepingColumns) {\r\n            return null;\r\n        }\r\n        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];\r\n        var result = valueColumns.filter(function (col) { return !colsForThisNode[col.getId()]; });\r\n        return result;\r\n    };\r\n    // this is to check for a bug in our code. each part that uses ChangePath should check\r\n    // if it is valid first, and not use it if it is not valid\r\n    ChangedPath.prototype.validateActive = function () {\r\n        if (!this.active) {\r\n            throw \"ag-Grid: tried to work on an invalid changed path\";\r\n        }\r\n    };\r\n    return ChangedPath;\r\n}());\r\nexports.ChangedPath = ChangedPath;\r\n",null]}