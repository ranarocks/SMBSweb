{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\widgets\\component.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\widgets\\component.js","mtime":1525243700395},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\nvar beanStub_1 = require(\"../context/beanStub\");\r\nvar compIdSequence = new utils_1.NumberSequence();\r\nvar Component = /*@__PURE__*/ (function (_super) {\r\n    __extends(Component, _super);\r\n    function Component(template) {\r\n        var _this = _super.call(this) || this;\r\n        _this.childComponents = [];\r\n        _this.annotatedEventListeners = [];\r\n        _this.visible = true;\r\n        // unique id for this row component. this is used for getting a reference to the HTML dom.\r\n        // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying\r\n        // around as we create a new rowComp instance for the same row node).\r\n        _this.compId = compIdSequence.next();\r\n        if (template) {\r\n            _this.setTemplate(template);\r\n        }\r\n        return _this;\r\n    }\r\n    Component.prototype.getCompId = function () {\r\n        return this.compId;\r\n    };\r\n    Component.prototype.instantiate = function (context) {\r\n        this.instantiateRecurse(this.getGui(), context);\r\n    };\r\n    Component.prototype.instantiateRecurse = function (parentNode, context) {\r\n        var _this = this;\r\n        // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM\r\n        // which messes up the traversal order of the children.\r\n        var childNodeList = utils_1.Utils.copyNodeList(parentNode.childNodes);\r\n        childNodeList.forEach(function (childNode) {\r\n            var childComp = context.createComponent(childNode, function (childComp) {\r\n                var attrList = _this.getAttrLists(childNode);\r\n                _this.copyAttributesFromNode(attrList, childComp.getGui());\r\n                _this.createChildAttributes(attrList, childComp);\r\n                _this.addEventListenersToComponent(attrList, childComp);\r\n            });\r\n            if (childComp) {\r\n                _this.swapComponentForNode(childComp, parentNode, childNode);\r\n            }\r\n            else {\r\n                if (childNode.childNodes) {\r\n                    _this.instantiateRecurse(childNode, context);\r\n                }\r\n                if (childNode instanceof HTMLElement) {\r\n                    var attrList = _this.getAttrLists(childNode);\r\n                    _this.addEventListenersToElement(attrList, childNode);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Component.prototype.getAttrLists = function (child) {\r\n        var res = {\r\n            bindings: [],\r\n            events: [],\r\n            normal: []\r\n        };\r\n        utils_1.Utils.iterateNamedNodeMap(child.attributes, function (name, value) {\r\n            var firstCharacter = name.substr(0, 1);\r\n            if (firstCharacter === '(') {\r\n                var eventName = name.replace('(', '').replace(')', '');\r\n                res.events.push({\r\n                    name: eventName,\r\n                    value: value\r\n                });\r\n            }\r\n            else if (firstCharacter === '[') {\r\n                var bindingName = name.replace('[', '').replace(']', '');\r\n                res.bindings.push({\r\n                    name: bindingName,\r\n                    value: value\r\n                });\r\n            }\r\n            else {\r\n                res.normal.push({\r\n                    name: name,\r\n                    value: value\r\n                });\r\n            }\r\n        });\r\n        return res;\r\n    };\r\n    Component.prototype.addEventListenersToElement = function (attrLists, element) {\r\n        var _this = this;\r\n        this.addEventListenerCommon(attrLists, function (eventName, listener) {\r\n            _this.addDestroyableEventListener(element, eventName, listener);\r\n        });\r\n    };\r\n    Component.prototype.addEventListenersToComponent = function (attrLists, component) {\r\n        var _this = this;\r\n        this.addEventListenerCommon(attrLists, function (eventName, listener) {\r\n            _this.addDestroyableEventListener(component, eventName, listener);\r\n        });\r\n    };\r\n    Component.prototype.addEventListenerCommon = function (attrLists, callback) {\r\n        var _this = this;\r\n        var methodAliases = this.getAgComponentMetaData('methods');\r\n        attrLists.events.forEach(function (nameValue) {\r\n            var methodName = nameValue.value;\r\n            var methodAlias = utils_1.Utils.find(methodAliases, 'alias', methodName);\r\n            var methodNameToUse = utils_1.Utils.exists(methodAlias) ? methodAlias.methodName : methodName;\r\n            var listener = _this[methodNameToUse];\r\n            if (typeof listener !== 'function') {\r\n                console.warn('ag-Grid: count not find callback ' + methodName);\r\n                return;\r\n            }\r\n            var eventCamelCase = utils_1.Utils.hyphenToCamelCase(nameValue.name);\r\n            callback(eventCamelCase, listener.bind(_this));\r\n        });\r\n    };\r\n    Component.prototype.createChildAttributes = function (attrLists, child) {\r\n        var _this = this;\r\n        var childAttributes = {};\r\n        attrLists.normal.forEach(function (nameValue) {\r\n            var nameCamelCase = utils_1.Utils.hyphenToCamelCase(nameValue.name);\r\n            childAttributes[nameCamelCase] = nameValue.value;\r\n        });\r\n        attrLists.bindings.forEach(function (nameValue) {\r\n            var nameCamelCase = utils_1.Utils.hyphenToCamelCase(nameValue.name);\r\n            childAttributes[nameCamelCase] = _this[nameValue.value];\r\n        });\r\n        child.props = childAttributes;\r\n    };\r\n    Component.prototype.copyAttributesFromNode = function (attrLists, childNode) {\r\n        attrLists.normal.forEach(function (nameValue) {\r\n            childNode.setAttribute(nameValue.name, nameValue.value);\r\n        });\r\n    };\r\n    Component.prototype.swapComponentForNode = function (newComponent, parentNode, childNode) {\r\n        var eComponent = newComponent.getGui();\r\n        parentNode.replaceChild(eComponent, childNode);\r\n        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);\r\n        this.childComponents.push(newComponent);\r\n        this.swapInComponentForQuerySelectors(newComponent, childNode);\r\n    };\r\n    Component.prototype.swapInComponentForQuerySelectors = function (newComponent, childNode) {\r\n        var thisProto = Object.getPrototypeOf(this);\r\n        var thisNoType = this;\r\n        while (thisProto != null) {\r\n            var metaData = thisProto.__agComponentMetaData;\r\n            var currentProtoName = (thisProto.constructor).name;\r\n            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {\r\n                metaData[currentProtoName].querySelectors.forEach(function (querySelector) {\r\n                    if (thisNoType[querySelector.attributeName] === childNode) {\r\n                        thisNoType[querySelector.attributeName] = newComponent;\r\n                    }\r\n                });\r\n            }\r\n            thisProto = Object.getPrototypeOf(thisProto);\r\n        }\r\n    };\r\n    Component.prototype.setTemplate = function (template) {\r\n        var eGui = utils_1.Utils.loadTemplate(template);\r\n        this.setTemplateFromElement(eGui);\r\n    };\r\n    Component.prototype.setTemplateFromElement = function (element) {\r\n        this.eGui = element;\r\n        this.eGui.__agComponent = this;\r\n        this.addAnnotatedEventListeners();\r\n        this.wireQuerySelectors();\r\n    };\r\n    Component.prototype.wireQuerySelectors = function () {\r\n        var _this = this;\r\n        if (!this.eGui) {\r\n            return;\r\n        }\r\n        var thisProto = Object.getPrototypeOf(this);\r\n        var _loop_1 = function () {\r\n            var metaData = thisProto.__agComponentMetaData;\r\n            var currentProtoName = (thisProto.constructor).name;\r\n            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {\r\n                var thisNoType_1 = this_1;\r\n                metaData[currentProtoName].querySelectors.forEach(function (querySelector) {\r\n                    var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);\r\n                    if (resultOfQuery) {\r\n                        var backingComponent = resultOfQuery.__agComponent;\r\n                        if (backingComponent) {\r\n                            thisNoType_1[querySelector.attributeName] = backingComponent;\r\n                        }\r\n                        else {\r\n                            thisNoType_1[querySelector.attributeName] = resultOfQuery;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // put debug msg in here if query selector fails???\r\n                    }\r\n                });\r\n            }\r\n            thisProto = Object.getPrototypeOf(thisProto);\r\n        };\r\n        var this_1 = this;\r\n        while (thisProto != null) {\r\n            _loop_1();\r\n        }\r\n    };\r\n    Component.prototype.addAnnotatedEventListeners = function () {\r\n        var _this = this;\r\n        this.removeAnnotatedEventListeners();\r\n        if (!this.eGui) {\r\n            return;\r\n        }\r\n        var listenerMethods = this.getAgComponentMetaData('listenerMethods');\r\n        if (utils_1.Utils.missingOrEmpty(listenerMethods)) {\r\n            return;\r\n        }\r\n        if (!this.annotatedEventListeners) {\r\n            this.annotatedEventListeners = [];\r\n        }\r\n        listenerMethods.forEach(function (eventListener) {\r\n            var listener = _this[eventListener.methodName].bind(_this);\r\n            _this.eGui.addEventListener(eventListener.eventName, listener);\r\n            _this.annotatedEventListeners.push({ eventName: eventListener.eventName, listener: listener });\r\n        });\r\n    };\r\n    Component.prototype.getAgComponentMetaData = function (key) {\r\n        var res = [];\r\n        var thisProto = Object.getPrototypeOf(this);\r\n        while (thisProto != null) {\r\n            var metaData = thisProto.__agComponentMetaData;\r\n            var currentProtoName = (thisProto.constructor).name;\r\n            if (metaData && metaData[currentProtoName] && metaData[currentProtoName][key]) {\r\n                res = res.concat(metaData[currentProtoName][key]);\r\n            }\r\n            thisProto = Object.getPrototypeOf(thisProto);\r\n        }\r\n        return res;\r\n    };\r\n    Component.prototype.removeAnnotatedEventListeners = function () {\r\n        var _this = this;\r\n        if (!this.annotatedEventListeners) {\r\n            return;\r\n        }\r\n        if (!this.eGui) {\r\n            return;\r\n        }\r\n        this.annotatedEventListeners.forEach(function (eventListener) {\r\n            _this.eGui.removeEventListener(eventListener.eventName, eventListener.listener);\r\n        });\r\n        this.annotatedEventListeners = null;\r\n    };\r\n    Component.prototype.getGui = function () {\r\n        return this.eGui;\r\n    };\r\n    // this method is for older code, that wants to provide the gui element,\r\n    // it is not intended for this to be in ag-Stack\r\n    Component.prototype.setGui = function (eGui) {\r\n        this.eGui = eGui;\r\n    };\r\n    Component.prototype.queryForHtmlElement = function (cssSelector) {\r\n        return this.eGui.querySelector(cssSelector);\r\n    };\r\n    Component.prototype.queryForHtmlInputElement = function (cssSelector) {\r\n        return this.eGui.querySelector(cssSelector);\r\n    };\r\n    Component.prototype.appendChild = function (newChild) {\r\n        if (utils_1.Utils.isNodeOrElement(newChild)) {\r\n            this.eGui.appendChild(newChild);\r\n        }\r\n        else {\r\n            var childComponent = newChild;\r\n            this.eGui.appendChild(childComponent.getGui());\r\n            this.childComponents.push(childComponent);\r\n        }\r\n    };\r\n    Component.prototype.addFeature = function (context, feature) {\r\n        context.wireBean(feature);\r\n        if (feature.destroy) {\r\n            this.addDestroyFunc(feature.destroy.bind(feature));\r\n        }\r\n    };\r\n    Component.prototype.isVisible = function () {\r\n        return this.visible;\r\n    };\r\n    Component.prototype.setVisible = function (visible) {\r\n        if (visible !== this.visible) {\r\n            this.visible = visible;\r\n            utils_1.Utils.addOrRemoveCssClass(this.eGui, 'ag-hidden', !visible);\r\n            var event_1 = {\r\n                type: Component.EVENT_VISIBLE_CHANGED,\r\n                visible: this.visible\r\n            };\r\n            this.dispatchEvent(event_1);\r\n        }\r\n    };\r\n    Component.prototype.addOrRemoveCssClass = function (className, addOrRemove) {\r\n        utils_1.Utils.addOrRemoveCssClass(this.eGui, className, addOrRemove);\r\n    };\r\n    Component.prototype.destroy = function () {\r\n        _super.prototype.destroy.call(this);\r\n        this.childComponents.forEach(function (childComponent) { return childComponent.destroy(); });\r\n        this.childComponents.length = 0;\r\n        this.removeAnnotatedEventListeners();\r\n    };\r\n    Component.prototype.addGuiEventListener = function (event, listener) {\r\n        var _this = this;\r\n        this.getGui().addEventListener(event, listener);\r\n        this.addDestroyFunc(function () { return _this.getGui().removeEventListener(event, listener); });\r\n    };\r\n    Component.prototype.addCssClass = function (className) {\r\n        utils_1.Utils.addCssClass(this.getGui(), className);\r\n    };\r\n    Component.prototype.removeCssClass = function (className) {\r\n        utils_1.Utils.removeCssClass(this.getGui(), className);\r\n    };\r\n    Component.prototype.getAttribute = function (key) {\r\n        var eGui = this.getGui();\r\n        if (eGui) {\r\n            return eGui.getAttribute(key);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    Component.prototype.getRefElement = function (refName) {\r\n        return this.queryForHtmlElement('[ref=\"' + refName + '\"]');\r\n    };\r\n    Component.EVENT_VISIBLE_CHANGED = 'visibleChanged';\r\n    return Component;\r\n}(beanStub_1.BeanStub));\r\nexports.Component = Component;\r\n",null]}