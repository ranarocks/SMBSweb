{"remainingRequest":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\rendering\\cellRenderers\\animateShowChangeCellRenderer.js","dependencies":[{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\ag-grid\\dist\\lib\\rendering\\cellRenderers\\animateShowChangeCellRenderer.js","mtime":1525243699798},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1530947965468},{"path":"D:\\Imp\\Learn\\SMBSweb\\UX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\r\n * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v17.1.1\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../../utils\");\r\nvar component_1 = require(\"../../widgets/component\");\r\nvar ARROW_UP = '&#65514;';\r\nvar ARROW_DOWN = '&#65516;';\r\nvar AnimateShowChangeCellRenderer = /*@__PURE__*/ (function (_super) {\r\n    __extends(AnimateShowChangeCellRenderer, _super);\r\n    function AnimateShowChangeCellRenderer() {\r\n        var _this = _super.call(this, AnimateShowChangeCellRenderer.TEMPLATE) || this;\r\n        _this.refreshCount = 0;\r\n        return _this;\r\n    }\r\n    AnimateShowChangeCellRenderer.prototype.init = function (params) {\r\n        // this.params = params;\r\n        this.eValue = this.queryForHtmlElement('.ag-value-change-value');\r\n        this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');\r\n        this.refresh(params);\r\n    };\r\n    AnimateShowChangeCellRenderer.prototype.showDelta = function (params, delta) {\r\n        var absDelta = Math.abs(delta);\r\n        var valueFormatted = params.formatValue(absDelta);\r\n        var valueToUse = utils_1.Utils.exists(valueFormatted) ? valueFormatted : absDelta;\r\n        var deltaUp = (delta >= 0);\r\n        if (deltaUp) {\r\n            this.eDelta.innerHTML = ARROW_UP + valueToUse;\r\n        }\r\n        else {\r\n            // because negative, use ABS to remove sign\r\n            this.eDelta.innerHTML = ARROW_DOWN + valueToUse;\r\n        }\r\n        // class makes it green (in ag-fresh)\r\n        utils_1.Utils.addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-up', deltaUp);\r\n        // class makes it red (in ag-fresh)\r\n        utils_1.Utils.addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-down', !deltaUp);\r\n    };\r\n    AnimateShowChangeCellRenderer.prototype.setTimerToRemoveDelta = function () {\r\n        var _this = this;\r\n        // the refreshCount makes sure that if the value updates again while\r\n        // the below timer is waiting, then the below timer will realise it\r\n        // is not the most recent and will not try to remove the delta value.\r\n        this.refreshCount++;\r\n        var refreshCountCopy = this.refreshCount;\r\n        setTimeout(function () {\r\n            if (refreshCountCopy === _this.refreshCount) {\r\n                _this.hideDeltaValue();\r\n            }\r\n        }, 2000);\r\n    };\r\n    AnimateShowChangeCellRenderer.prototype.hideDeltaValue = function () {\r\n        utils_1.Utils.removeCssClass(this.eValue, 'ag-value-change-value-highlight');\r\n        this.eDelta.innerHTML = '';\r\n    };\r\n    AnimateShowChangeCellRenderer.prototype.refresh = function (params) {\r\n        var value = params.value;\r\n        if (value === this.lastValue) {\r\n            return;\r\n        }\r\n        if (utils_1.Utils.exists(params.valueFormatted)) {\r\n            this.eValue.innerHTML = params.valueFormatted;\r\n        }\r\n        else if (utils_1.Utils.exists(params.value)) {\r\n            this.eValue.innerHTML = value;\r\n        }\r\n        else {\r\n            this.eValue.innerHTML = '';\r\n        }\r\n        if (typeof value === 'number' && typeof this.lastValue === 'number') {\r\n            var delta = value - this.lastValue;\r\n            this.showDelta(params, delta);\r\n        }\r\n        // highlight the current value, but only if it's not new, otherwise it\r\n        // would get highlighted first time the value is shown\r\n        if (this.lastValue) {\r\n            utils_1.Utils.addCssClass(this.eValue, 'ag-value-change-value-highlight');\r\n        }\r\n        this.setTimerToRemoveDelta();\r\n        this.lastValue = value;\r\n        return true;\r\n    };\r\n    AnimateShowChangeCellRenderer.TEMPLATE = '<span>' +\r\n        '<span class=\"ag-value-change-delta\"></span>' +\r\n        '<span class=\"ag-value-change-value\"></span>' +\r\n        '</span>';\r\n    return AnimateShowChangeCellRenderer;\r\n}(component_1.Component));\r\nexports.AnimateShowChangeCellRenderer = AnimateShowChangeCellRenderer;\r\n",null]}